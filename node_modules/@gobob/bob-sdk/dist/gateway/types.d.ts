import type { EsploraClient } from '../esplora';
type ChainSlug = string | number;
type TokenSymbol = string;
export type EvmAddress = string;
export declare enum Chain {
    BITCOIN = "bitcoin",
    BOB = "bob",
    BOB_SEPOLIA = "bob-sepolia"
}
export declare enum ChainId {
    BOB = 60808,
    BOB_SEPOLIA = 808813
}
export interface Token {
    chainId: number;
    address: string;
    name: string;
    symbol: string;
    decimals: number;
    logoURI: string;
}
export interface GatewayQuoteParams {
    fromChain: ChainSlug;
    toChain: ChainSlug;
    fromToken: TokenSymbol;
    toToken: TokenSymbol;
    fromUserAddress: string;
    toUserAddress: string;
    amount: number | string;
    maxSlippage?: number;
    affiliateId?: string;
    type?: 'swap' | 'deposit' | 'withdraw' | 'claim';
    fee?: number;
    feeRate?: number;
    gasRefill?: number;
    fromUserPublicKey?: string;
    strategyAddress?: string;
}
type GatewayIntegrationType = 'bridge' | 'dex' | 'staking' | 'lending';
interface GatewayIntegration {
    type: GatewayIntegrationType;
    slug: string;
    name: string;
    logo: string;
    monetization: boolean;
}
type GatewayStrategyType = 'deposit' | 'withdraw' | 'claim' | 'router' | 'bridge';
interface GatewayToken {
    symbol: string;
    address: string;
    logo: string;
    decimals: number;
    chain: string;
}
type GatewayChainType = 'evm' | 'ibc' | 'solana' | 'multiversx' | 'bitcoin' | 'ton' | 'tron';
interface GatewayChain {
    id: string;
    chainId: number;
    slug: string;
    name: string;
    logo: string;
    type: GatewayChainType;
    singleChainSwap: boolean;
    singleChainStaking: boolean;
    nativeToken?: GatewayToken;
    txExplorer?: string;
    tokenExplorer?: string;
    rpcUrl?: string;
}
export interface GatewayStrategyContract {
    id: string;
    type: GatewayStrategyType;
    address: string;
    method: string;
    chain: GatewayChain;
    integration: GatewayIntegration;
    inputToken: GatewayToken;
    outputToken: GatewayToken | null;
}
export type GatewayQuote = {
    gatewayAddress: EvmAddress;
    baseTokenAddress: EvmAddress;
    dustThreshold: number;
    satoshis: number;
    fee: number;
    bitcoinAddress: string;
    txProofDifficultyFactor: number;
    strategyAddress?: EvmAddress;
};
export type GatewayCreateOrderRequest = {
    gatewayAddress: EvmAddress;
    strategyAddress?: EvmAddress;
    satsToConvertToEth: number;
    userAddress: EvmAddress;
    gatewayExtraData?: string;
    strategyExtraData?: string;
    satoshis: number;
};
export interface GatewayOrderResponse {
    gatewayAddress: EvmAddress;
    baseTokenAddress: EvmAddress;
    txid: string;
    status: boolean;
    timestamp: number;
    tokens: string;
    satoshis: number;
    fee: number;
    txProofDifficultyFactor: number;
    strategyAddress?: EvmAddress;
    satsToConvertToEth: number;
    outputEthAmount?: string;
    outputTokenAddress?: EvmAddress;
    outputTokenAmount?: string;
    txHash?: string;
}
export type OrderStatusData = {
    confirmations: number;
};
export type OrderStatus = {
    confirmed: false;
    pending?: never;
    success?: never;
    data: OrderStatusData;
} | {
    confirmed?: never;
    pending: true;
    success?: never;
    data: OrderStatusData;
} | {
    confirmed?: never;
    pending?: never;
    success: boolean;
    data: OrderStatusData;
};
export type GatewayOrder = Omit<GatewayOrderResponse & {
    gasRefill: number;
}, 'satsToConvertToEth'> & {
    getTokenAddress(): string | undefined;
    getToken(): Token | undefined;
    getTokenAmount(): string | number | undefined;
    getConfirmations(esploraClient: EsploraClient, latestHeight?: number): Promise<number>;
    getStatus(esploraClient: EsploraClient, latestHeight?: number): Promise<OrderStatus>;
};
export type GatewayTokensInfo = {
    baseToken: Token;
    outputToken?: Token;
};
export type GatewayCreateOrderResponse = {
    uuid: string;
    opReturnHash: string;
};
export type GatewayStartOrder = GatewayCreateOrderResponse & {
    bitcoinAddress: string;
    satoshis: number;
    psbtBase64?: string;
};
export interface GatewayStrategy {
    strategyAddress: string;
    strategyName: string;
    strategyType: 'staking' | 'lending';
    projectName: string;
    projectLogo?: string;
    inputTokenAddress: string;
    outputTokenAddress?: string;
}
export {};
