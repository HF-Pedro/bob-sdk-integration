export declare const REGTEST_ORD_BASE_PATH = "http://0.0.0.0:3003";
export declare const MAINNET_ORD_BASE_PATH = "https://ordinals-mainnet.gobob.xyz";
export declare const TESTNET_ORD_BASE_PATH = "https://ordinals-testnet.gobob.xyz";
export type InscriptionId = {
    txid: string;
    index: number;
};
export declare namespace InscriptionId {
    function toString(id: InscriptionId): string;
    function fromString(id: string): InscriptionId;
}
export type OutPoint = {
    txid: string;
    vout: number;
};
export declare namespace OutPoint {
    function toString(id: OutPoint): string;
    function fromString(id: string): OutPoint;
}
export type SatPoint = {
    outpoint: OutPoint;
    offset: number;
};
export declare namespace SatPoint {
    function toString(id: SatPoint): string;
    function fromString(id: string): SatPoint;
}
export interface InscriptionsJson<InscriptionId> {
    ids: InscriptionId[];
    more: boolean;
    page_index: number;
}
export interface OutputJson {
    address: string | null;
    indexed: boolean;
    inscriptions: string[];
    runes: {
        [key: string]: {
            amount: number;
            divisibility: number;
            symbol: string | null;
        };
    };
    outpoint: string;
    sat_ranges: [number, number][] | null;
    script_pubkey: string;
    spent: boolean;
    transaction: string;
    value: number;
}
export interface AddressInfo {
    outputs: string[];
    inscriptions: string[];
    sat_balance: number;
    runes_balances: [string, `${number}`, string][];
}
export interface SatJson<InscriptionId> {
    number: number;
    decimal: string;
    degree: string;
    name: string;
    block: number;
    charms: number[];
    cycle: number;
    epoch: number;
    period: number;
    offset: number;
    rarity: string;
    percentile: string;
    satpoint: string | null;
    timestamp: number;
    inscriptions: InscriptionId[];
}
export interface InscriptionJson<InscriptionId, SatPoint> {
    address: string | null;
    charms: string[];
    child_count: number;
    children: InscriptionId[];
    content_length: number | null;
    content_type: string | null;
    effective_content_type: string | null;
    fee: number;
    height: number;
    id: InscriptionId;
    next: InscriptionId | null;
    number: number;
    parents: string[];
    previous: InscriptionId | null;
    rune: string | null;
    sat: number | null;
    satpoint: SatPoint;
    timestamp: number;
    value: number | null;
}
export declare class OrdinalsClient {
    private basePath;
    constructor(networkOrUrl?: string);
    getAssetsByAddress(address: string): Promise<AddressInfo>;
    getInscriptionFromId(id: InscriptionId): Promise<InscriptionJson<InscriptionId, SatPoint>>;
    getInscriptions(): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromBlock(height: number): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromOutPoint(outPoint: OutPoint): Promise<OutputJson>;
    getOutputsFromAddress(address: string, type?: 'cardinal' | 'inscribed' | 'runic' | 'any'): Promise<OutputJson[]>;
    getInscriptionsFromSat(sat: number): Promise<SatJson<InscriptionId>>;
    getInscriptionsFromStartBlock(startHeight: number): Promise<InscriptionsJson<InscriptionId>>;
    private getJson;
    private parseInscriptionsJson;
}
