"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esplora_1 = require("../esplora");
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const node_child_process_1 = require("node:child_process");
const args = (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
    .env('RELAY')
    .option('private-key', {
    description: 'Private key to submit with',
    type: 'string',
})
    .option('dev', {
    description: 'Deploy the contracts locally',
    type: 'boolean',
})
    .option('network', {
    description: 'Bitcoin network to use',
    type: 'string',
    demandOption: true,
})
    .option('rpc-url', {
    description: 'ETH RPC URL',
    type: 'string',
})
    .option('relay-address', {
    description: 'Relay address',
    type: 'string',
    demandOption: true,
}).argv;
main().catch((err) => {
    console.log('Error thrown by script:');
    console.log(err);
    process.exit(1);
});
function range(size, startAt = 0) {
    return [...Array(size).keys()].map((i) => i + startAt);
}
async function getRetargetHeaders(esploraClient, nextRetargetHeight, proofLength) {
    const beforeRetarget = await Promise.all(range(proofLength, nextRetargetHeight - proofLength).map((height) => esploraClient.getBlockHeaderAt(height)));
    const afterRetarget = await Promise.all(range(proofLength, nextRetargetHeight).map((height) => esploraClient.getBlockHeaderAt(height)));
    return beforeRetarget.concat(afterRetarget).join('');
}
async function main() {
    const esploraClient = new esplora_1.EsploraClient(args['network']);
    let privateKey;
    if (args['private-key']) {
        privateKey = args['private-key'];
    }
    else if (args['dev']) {
        privateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80';
    }
    else {
        throw new Error('No private key');
    }
    const relayAddress = args['relay-address'];
    let rpcUrl;
    if (args['dev']) {
        rpcUrl = 'http://localhost:8545';
    }
    else if (args['rpc-url'] == 'testnet') {
        rpcUrl = 'https://bob-sepolia.rpc.gobob.xyz/';
    }
    else if (args['rpc-url'] == 'mainnet') {
        rpcUrl = 'https://rpc.gobob.xyz/';
    }
    else {
        rpcUrl = args['rpc-url'];
    }
    const currentEpoch = await new Promise((resolve, reject) => {
        (0, node_child_process_1.exec)(`cast call ${relayAddress} "currentEpoch() (uint256)" --rpc-url '${rpcUrl}'`, (err, stdout, _stderr) => {
            if (err)
                reject(`Failed to run command: ${err}`);
            resolve(Number.parseInt(stdout));
        });
    });
    console.log(`Current epoch: ${currentEpoch}`);
    const proofLength = await new Promise((resolve, reject) => {
        (0, node_child_process_1.exec)(`cast call ${relayAddress} "proofLength() (uint256)" --rpc-url '${rpcUrl}'`, (err, stdout, _stderr) => {
            if (err)
                reject(`Failed to run command: ${err}`);
            resolve(Number.parseInt(stdout));
        });
    });
    console.log(`Proof length: ${proofLength}`);
    const nextEpoch = currentEpoch + 1;
    const nextRetargetHeight = nextEpoch * 2016;
    console.log(`Next epoch: ${nextEpoch}`);
    console.log(`Next retarget height: ${nextRetargetHeight}`);
    try {
        await esploraClient.getBlockHash(nextRetargetHeight + proofLength);
    }
    catch (_) {
        console.log(`Cannot retarget without ${proofLength} headers after ${nextRetargetHeight}. Exiting.`);
        return;
    }
    const retargetHeaders = await getRetargetHeaders(esploraClient, nextRetargetHeight, proofLength);
    let env = {
        RELAY_ADDRESS: relayAddress,
        RETARGET_HEADERS: retargetHeaders,
        PRIVATE_KEY: privateKey,
    };
    (0, node_child_process_1.exec)(`forge script ../script/RelayRetarget.s.sol:RelayRetargetScript --rpc-url '${rpcUrl}' --broadcast --priority-gas-price 1`, { env: { ...process.env, ...env } }, (err, stdout, stderr) => {
        if (err) {
            throw new Error(`Failed to run command: ${err}`);
        }
        console.log(`stdout: ${stdout}`);
        console.log(`stderr: ${stderr}`);
    });
}
//# sourceMappingURL=relay-retarget.js.map