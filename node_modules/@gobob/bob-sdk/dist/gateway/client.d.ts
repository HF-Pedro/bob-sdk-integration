import { GatewayQuoteParams, GatewayQuote, Token, GatewayStrategyContract, GatewayOrder, GatewayStartOrder, EvmAddress, GatewayTokensInfo } from './types';
type Optional<T, K extends keyof T> = Omit<T, K> & Partial<T>;
export declare const MAINNET_GATEWAY_BASE_URL = "https://gateway-api-mainnet.gobob.xyz";
export declare const TESTNET_GATEWAY_BASE_URL = "https://gateway-api-testnet.gobob.xyz";
export declare class GatewayApiClient {
    private chain;
    private baseUrl;
    constructor(chainName: string);
    private get chainId();
    getChains(): string[];
    getQuote(params: Optional<GatewayQuoteParams, 'amount' | 'fromChain' | 'fromToken' | 'fromUserAddress' | 'toUserAddress'>): Promise<GatewayQuote & GatewayTokensInfo>;
    startOrder(gatewayQuote: GatewayQuote, params: Optional<GatewayQuoteParams, 'toToken' | 'amount'>): Promise<GatewayStartOrder>;
    finalizeOrder(uuid: string, bitcoinTxOrId: string): Promise<string>;
    getOrders(userAddress: EvmAddress): Promise<(GatewayOrder & GatewayTokensInfo)[]>;
    getStrategies(): Promise<GatewayStrategyContract[]>;
    getTokenAddresses(includeStrategies?: boolean): Promise<EvmAddress[]>;
    getTokens(includeStrategies?: boolean): Promise<Token[]>;
    private fetchGet;
}
export {};
