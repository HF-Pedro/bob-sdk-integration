export declare const MAINNET_ESPLORA_BASE_PATH = "https://btc-mainnet.gobob.xyz";
export declare const TESTNET_ESPLORA_BASE_PATH = "https://btc-testnet.gobob.xyz";
export declare const REGTEST_ESPLORA_BASE_PATH = "http://localhost:3003";
export interface MerkleProof {
    blockHeight: number;
    merkle: string;
    pos: number;
}
export interface UTXO {
    txid: string;
    vout: number;
    value: number;
    confirmed: boolean;
    height?: number;
}
export interface Transaction {
    txid: string;
    version: number;
    locktime: number;
    size: number;
    weight: number;
    fee: number;
    vin: Array<{
        txid: string;
        vout: number;
        is_coinbase: boolean;
        scriptsig: string;
        scriptsig_asm: string;
        inner_redeemscript_asm?: string;
        inner_witnessscript_asm?: string;
        sequence?: number;
        witness?: string[];
        prevout: {
            scriptpubkey: string;
            scriptpubkey_asm: string;
            scriptpubkey_type: string;
            scriptpubkey_address: string;
            value: number;
        } | null;
    }>;
    vout: Array<{
        scriptpubkey: string;
        scriptpubkey_asm?: string;
        scriptpubkey_type?: string;
        scriptpubkey_address?: string;
        value: number;
    }>;
    status: TransactionStatus;
}
export interface TransactionStatus {
    confirmed: boolean;
    block_height?: number;
    block_hash?: string;
    block_time?: number;
}
export interface Block {
    id: string;
    height: number;
    version: number;
    timestamp: number;
    bits: number;
    nonce: number;
    difficulty: number;
    merkle_root: string;
    tx_count: number;
    size: number;
    weight: number;
    previousblockhash: string | null;
    mediantime: number;
}
export type ConfirmationTarget = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 144 | 504 | 1008;
export type EsploraFeeEstimates = Record<ConfirmationTarget, number>;
export declare class EsploraClient {
    private basePath;
    constructor(networkOrUrl?: string);
    getLatestHeight(): Promise<number>;
    getBlock(blockHash: string): Promise<Block>;
    getBlockHash(height: number): Promise<string>;
    getBlockHeader(hash: string): Promise<string>;
    getBlockHeaderAt(height: number): Promise<string>;
    getTransaction(txId: string): Promise<Transaction>;
    getTransactionStatus(txId: string): Promise<TransactionStatus>;
    getTransactionHex(txId: string): Promise<string>;
    getMerkleProof(txId: string): Promise<MerkleProof>;
    getFeeEstimate(confirmationTarget: number): Promise<number>;
    getFeeEstimates(): Promise<EsploraFeeEstimates>;
    getAddressUtxos(address: string, confirmed?: boolean): Promise<Array<UTXO>>;
    broadcastTx(txHex: string): Promise<string>;
    getBalance(address: string): Promise<{
        confirmed: number;
        unconfirmed: number;
        total: number;
    }>;
    private getJson;
    private getText;
}
