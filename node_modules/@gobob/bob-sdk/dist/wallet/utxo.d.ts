import { Transaction } from '@scure/btc-signer';
import { AddressType, Network } from 'bitcoin-address-validation';
import { UTXO } from '../esplora';
export type BitcoinNetworkName = Exclude<Network, 'regtest'>;
export declare const getBtcNetwork: (name: BitcoinNetworkName) => {
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
};
export interface Input {
    txid: string;
    index: number;
    witness_script?: Uint8Array;
    redeemScript?: Uint8Array;
    witnessUtxo?: {
        script: Uint8Array;
        amount: bigint;
    };
    nonWitnessUtxo?: Uint8Array;
}
export declare function createBitcoinPsbt(fromAddress: string, toAddress: string, amount: number, publicKey?: string, opReturnData?: string, feeRate?: number, confirmationTarget?: number): Promise<string>;
export declare function getInputFromUtxoAndTx(network: BitcoinNetworkName, utxo: UTXO, transaction: Transaction, addressType: AddressType, publicKey?: string): Input;
export declare function estimateTxFee(fromAddress: string, amount?: number, publicKey?: string, opReturnData?: string, feeRate?: number, confirmationTarget?: number): Promise<bigint>;
export declare function getBalance(address?: string): Promise<{
    confirmed: bigint;
    unconfirmed: bigint;
    total: bigint;
}>;
