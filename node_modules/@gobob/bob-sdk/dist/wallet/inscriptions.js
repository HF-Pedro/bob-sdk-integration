"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUtxoForInscriptionId = findUtxoForInscriptionId;
exports.findUtxosWithoutInscriptions = findUtxosWithoutInscriptions;
const inscription_1 = require("../inscription");
const ordinal_api_1 = require("../ordinal-api");
async function findUtxoForInscriptionId(esploraClient, ordinalsClient, utxos, inscriptionId) {
    const { txid, index } = ordinal_api_1.InscriptionId.fromString(inscriptionId);
    for (const utxo of utxos) {
        if (utxo.confirmed) {
            const inscriptionUtxo = await ordinalsClient.getInscriptionsFromOutPoint(utxo);
            if (inscriptionUtxo.inscriptions && inscriptionUtxo.inscriptions.includes(inscriptionId)) {
                return utxo;
            }
        }
        else if (txid == utxo.txid) {
            const inscriptions = await (0, inscription_1.getTxInscriptions)(esploraClient, utxo.txid);
            if (typeof inscriptions[index] !== 'undefined') {
                return utxo;
            }
        }
    }
    return undefined;
}
async function findUtxosWithoutInscriptions(network, utxos) {
    const ordinalsClient = new ordinal_api_1.OrdinalsClient(network);
    const safeUtxos = [];
    await Promise.all([
        utxos.map(async (utxo) => {
            if (utxo.confirmed) {
                const inscription = await ordinalsClient.getInscriptionsFromOutPoint({
                    txid: utxo.txid,
                    vout: utxo.vout,
                });
                if (inscription.inscriptions.length === 0) {
                    safeUtxos.push(utxo);
                }
            }
        }),
    ]);
    return safeUtxos;
}
//# sourceMappingURL=inscriptions.js.map